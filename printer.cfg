# [include klicky-probe/klicky-variables.cfg]
# [include klicky-probe/klicky-macros.cfg]
# [include klicky-probe/klicky-bed-mesh-calibrate.cfg]
# #[include klicky-probe/klicky-screws-tilt-calculate.cfg]
# #[include klicky-probe/klicky-quad-gantry-level.cfg]
# #[include klicky-probe/klicky-z-tilt-adjust.cfg
# # Klicky Probe variable override
# [gcode_macro _User_Variables]
# variable_max_bed_y:           250
# variable_max_bed_x:           250
# Variable_attachmove_x:        0
# Variable_attachmove_y:        30

[include mainsail.cfg]
[include stealthburner_leds.cfg]

[include KAMP_Settings.cfg]
[include sensorless.cfg]
[include K-ShakeTune/*.cfg]

[include backup_config.cfg]

[force_move]
enable_force_move: True
#####################################################################
#   UUID Setting
#####################################################################
[mcu]
canbus_uuid:774747a077f3 

[mcu EBBCan]
canbus_uuid: 5f4989fd420d

[printer]
kinematics: corexy
max_velocity: 500  
max_accel: 8000    			
max_z_velocity: 25 			
max_z_accel: 350
square_corner_velocity: 5.0



#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on Motor1(B Motor)
[stepper_x]
step_pin: PE2
dir_pin: !PB4
enable_pin: !PC11
microsteps: 16
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 40   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC10
interpolate: False
run_current: 1.2
sense_resistor: 0.110
stealthchop_threshold: 0
driver_SGTHRS: 100
diag_pin: ^PF3 



## Y Stepper on Motor2 (A Motor)
[stepper_y]
step_pin: PF12
dir_pin: !PF11
enable_pin: !PB3
microsteps: 16

rotation_distance: 40
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
position_endstop: 355
position_max: 355

##--------------------------------------------------------------------
homing_speed: 40  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PF13
interpolate: False
run_current: 1.2
sense_resistor: 0.110
stealthchop_threshold: 0
driver_SGTHRS: 100
diag_pin: ^PF4

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR3
[stepper_z]
step_pin: PD7
dir_pin: !PD6
enable_pin: !PF10
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
#endstop_pin: ^PF5
endstop_pin: probe:z_virtual_endstop
position_max: 310

##--------------------------------------------------------------------
position_min: -5
homing_speed: 15
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PF9
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0


[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}
##	Z1 Stepper - Rear Left on Motor4
[stepper_z1]
step_pin: PD3
dir_pin: PD2
enable_pin: !PD5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z1]
uart_pin: PD4
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0


##	Z2 Stepper - Rear Right on Motor5
[stepper_z2]
step_pin: PC9
dir_pin: !PC8
enable_pin: !PD1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z2]
uart_pin: PD0
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0



##	Z3 Stepper - Front Right on Motor6
[stepper_z3]
step_pin: PA10
dir_pin: PA14
enable_pin: !PA15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z3]
uart_pin: PF8
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0







[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 8
rotation_distance: 23.156402703
gear_ratio: 50:10
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: Generic 3950
sensor_pin: EBBCan: PA3
pressure_advance: 0.03
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 300
min_extrude_temp: 0
max_extrude_cross_section: 5


[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.6
stealthchop_threshold: 999999


[fan]
pin: EBBCan: PA1
kick_start_time: 0.5
off_below: 0.5

[heater_fan hotend_fan]
pin: EBBCan: PA0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0




[heater_bed]
heater_pin: PB5
sensor_type: Generic 3950
sensor_pin: PA0
max_power: 1.0
min_temp: 0
max_temp: 130
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

[temperature_sensor buildplate]
sensor_type: Generic 3950
sensor_pin: PA1
min_temp: -40
max_temp: 120

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PA2
min_temp: -40
max_temp: 100

[temperature_sensor EBB_NTC]
sensor_type: Generic 3950
sensor_pin: EBBCan: PA2
min_temp: -40
max_temp: 100

[temperature_sensor CB1]
sensor_type: temperature_host



[probe]
pin: ^EBBCan: PB5
#z_offset: 0
speed: 10.0
samples: 1 #3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.01
samples_tolerance_retries: 10

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

[filament_switch_sensor switch_sensor]
switch_pin: ^PC1
pause_on_runout: False
runout_gcode:
  PAUSE # [pause_resume] is required in printer.cfg
  M117 Filament switch runout
insert_gcode:
  M117 Filament switch inserted

[filament_motion_sensor encoder_sensor]
switch_pin: ^PC2
detection_length: 10
extruder: extruder
pause_on_runout: False
runout_gcode:
  PAUSE # [pause_resume] is required in printer.cfg
  M117 Filament encoder runout
insert_gcode:
  M117 Filament encoder inserted

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
     SET_FILAMENT_SENSOR SENSOR="encoder_sensor" ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR="switch_sensor" ENABLE=0 ; Put your filament sensor's nam


[multi_pin controller_fans]
pins: PC12,PE0

[controller_fan controller_fan]
##  Controller fan
pin: multi_pin:controller_fans
max_power: 0.4
kick_start_time: 0.5
heater: heater_bed



[heater_fan nevermore_fan]
#  Exhaust fan - Nevermore Filter
pin: PE6
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 60
fan_speed: 1.0 


[quad_gantry_level]
gantry_corners:
	-60,-10
	410,420
points:
	50,30
	50,280
	300,280
	300,30

#--------------------------------------------------------------------
speed: 500
horizontal_move_z: 2
retries: 10
retry_tolerance: 0.0075
max_adjust: 10

[bed_mesh]
speed: 500
horizontal_move_z: 2
mesh_min: 10,10
mesh_max: 340,340
probe_count: 20,20
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 3
split_delta_z: .01

[skew_correction]

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: z,-y,x

[resonance_tester]
probe_points: 175, 175, 20
accel_chip: adxl345


[display]
#	mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
#	To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5
color_order: RGB

##	Set RGB values on boot up for each Neopixel. 
##	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
       SET_LED LED=btt_mini12864 RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=1 TRANSMIT=1
       SET_LED LED=btt_mini12864 RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=2 TRANSMIT=1
       SET_LED LED=btt_mini12864 RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=3 TRANSMIT=1


#################################################
################### Disco Led ###################
#################################################
#[neopixel disco1]
#pin: PA9
#chain_count: 25
#color_order: GRB
#initial_RED: 1.0
#initial_GREEN: 1.0
#initial_BLUE: 1.0

#[neopixel disco2]
#pin: PB15
#chain_count: 25
#color_order: GRB
#initial_RED: 1.0
#initial_GREEN: 1.0
#initial_BLUE: 1.0


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE9, EXP1_2=PE10,
    EXP1_3=PE11, EXP1_4=PE12,
    EXP1_5=PE13, EXP1_6=PE14,    # Slot in the socket on this side
    EXP1_7=PE15, EXP1_8=PB10,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PB14, EXP2_2=PB13,
    EXP2_3=PF7, EXP2_4=PB12,
    EXP2_5=PE7, EXP2_6=PB11,      # Slot in the socket on this side
    EXP2_7=PE8, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1


#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:

    set_skew XY=140.25,141.20,99.5 
    {% set BED_TEMP_TGT = params.BED|default(60)|float %} 
    {% set EXTRUDER_TEMP_TGT = params.EXTRUDER|int %}
    {% set ENCLOSURE_TEMP_TGT = params.Chamber|default(0)|int %}

    SET_FILAMENT_SENSOR SENSOR="switch_sensor" ENABLE=0
   SET_FILAMENT_SENSOR SENSOR="encoder_sensor" ENABLE=0
   M140 S{BED_TEMP_TGT}                  ; set bed final temp
   CLEAN_NOZZLE
    
    M190 S{BED_TEMP_TGT}                  ; wait for bed final temp
    
    
    G21                               ; set units to millimeters
    G90                               ; use absolute coordinates
    M83                               ; use relative distances for extrusion
    G32                            ; home all axes
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE             ; Calibrating bed mesh


    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP_TGT}  ; Heat soak (Slicer should have this in Start G-Code "PRINT_START BED=[first_layer_bed_temperature] HOTEND=[first_layer_temperature] CHAMBER=[chamber_temperature]" )
    
    Smart_Park                     ; Park near where the print will start
   
    M104 S{EXTRUDER_TEMP_TGT}             ; set extruder final temp
    M109 S{EXTRUDER_TEMP_TGT}             ; wait for extruder final temp


    Line_Purge                    ; This is put on slicer start G-code
    SET_FILAMENT_SENSOR SENSOR="switch_sensor" ENABLE=1
    SET_FILAMENT_SENSOR SENSOR="encoder_sensor" ENABLE=1    
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan   
    BED_MESH_CLEAR
   SET_FILAMENT_SENSOR SENSOR="encoder_sensor" ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR="switch_sensor" ENABLE=0 ; Put your filament sensor's name after SENSOR=
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=100

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    ;M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}
[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro ENCODER_DISABLE]
gcode:
    SET_FILAMENT_SENSOR SENSOR="encoder_sensor" ENABLE=0
[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 99999999
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

#####################################################################
#   Nozzle Cleaner
#####################################################################    
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 95
variable_start_y: 352
variable_start_z: 0.1
variable_wipe_dist_y: 2
variable_wipe_qty: 20
variable_wipe_spd: 300
variable_raise_distance: 10

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   #WIPE RIGHT
   G1 X{start_x - 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z{raise_distance}

[gcode_macro CLEAN_PURGE_NOZZLE]
variable_start_x: 95
variable_start_y: 345
variable_start_z: 10
variable_wipe_dist_y: -3
variable_wipe_qty: 5
variable_wipe_spd: 50
variable_raise_distance: 18
variable_purge_loc_x: 110
variable_purge_loc_y: 299

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   #WIPE RIGHT
   G1 X{start_x - 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 10} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z{raise_distance}
 G1 X{purge_loc_x}
 G1 Y{purge_loc_y}
 G92 E0
 G1 E40.0 F100
 G92 E0
 G1 E-4.0 F300
 G1 Z{start_z}
 G1 Y{start_y}
 G1 X 190 F1000


#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 46.893
#*# pid_ki = 1.954
#*# pid_kd = 281.355
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 18.265
#*# pid_ki = 0.806
#*# pid_kd = 103.430
#*#
#*# [probe]
#*# z_offset = -0.235
#*#
#*# [input_shaper]
#*# shaper_type_x = 3hump_ei
#*# shaper_freq_x = 79.4
#*# shaper_type_y = mzv
#*# shaper_freq_y = 39.2
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.040000, -0.052500, -0.067500, -0.052500, -0.045000, -0.030000, -0.015000, -0.037500, -0.050000, -0.070000
#*# 	  -0.090000, -0.082500, -0.087500, -0.080000, -0.065000, -0.042500, -0.035000, -0.030000, 0.020000, -0.035000
#*# 	  -0.100000, -0.055000, -0.090000, -0.072500, -0.025000, -0.040000, -0.032500, -0.025000, 0.010000, -0.020000
#*# 	  -0.087500, -0.090000, -0.080000, -0.080000, -0.042500, -0.065000, -0.022500, -0.035000, -0.025000, -0.025000
#*# 	  -0.072500, -0.072500, -0.032500, -0.035000, -0.027500, -0.025000, -0.027500, -0.035000, -0.025000, -0.020000
#*# 	  -0.075000, -0.045000, -0.035000, -0.020000, -0.045000, -0.017500, -0.025000, 0.020000, -0.022500, 0.007500
#*# 	  -0.035000, -0.030000, -0.025000, -0.042500, -0.020000, -0.022500, -0.025000, 0.010000, -0.002500, -0.007500
#*# x_count = 10
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 102.73
#*# max_x = 247.46
#*# min_y = 126.62
#*# max_y = 221.61
